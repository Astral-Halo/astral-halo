---
import { Icon } from 'astro-icon/components';
import Button from './Button.astro';

interface Props {
  total: number;
  current: number;
  baseUrl: string;
  specialPages?: { page: number; url: string }[];
}

const { total, current, baseUrl, specialPages } = Astro.props;

let pages: { page: number; url: string }[] = [];

function getPageUrl(page: number) {
  return specialPages?.find((p) => p.page === page)?.url || `${baseUrl}/${page}`;
}

function pushPage(page: number) {
  pages.push({ page, url: getPageUrl(page) });
}

if (total <= 5) Array.from({ length: total }).map((_, i) => pushPage(i + 1));
else {
  if (current <= 3) {
    Array.from({ length: 3 }).map((_, i) => pushPage(i + 1));
    pages.push({ page: -1, url: '' });
    pushPage(total);
  } else if (current >= total - 2) {
    pushPage(1);
    pages.push({ page: -1, url: '' });
    Array.from({ length: 3 }).map((_, i) => pushPage(total - 2 + i));
  } else {
    pushPage(1);
    pages.push({ page: -1, url: '' });
    pushPage(current - 1);
    pushPage(current);
    pushPage(current + 1);
    pages.push({ page: -1, url: '' });
    pushPage(total);
  }
}
---

<div id="pagination" class="flex w-full">
  {
    current > 1 && (
      <Button
        id="prev-page-btn"
        class="theme-bg theme-border mr-auto !rounded-xl border-2"
        href={getPageUrl(current - 1)}
      >
        <Icon name="material-symbols:keyboard-double-arrow-left-rounded" class="my-1" />
      </Button>
    )
  }
  <div class="mx-auto flex items-center justify-center gap-2">
    {
      pages.map((p) => {
        return (
          <Button
            class:list={[
              'theme-bg theme-border !rounded-xl border-2',
              current === p.page && 'theme-card-bg-hl',
            ]}
            href={p.url}
          >
            <span class="mx-1">{`${p.page === -1 ? '...' : p.page}`}</span>
          </Button>
        );
      })
    }
    {
      total > 1 && (
        <div
          id="page-jumper"
          class="theme-card-bg theme-border mx-2 flex flex-row items-center rounded-xl border-2"
          data-base-url={baseUrl}
          data-special-pages={specialPages?.map((p) => `${p.page}:${p.url}`).join(',')}
        >
          <input
            id="page-jumper-input"
            type="number"
            min="1"
            max={total}
            class="theme-bg !active:border-none border-none pl-4 duration-300"
          />
          <Button
            id="page-jumper-button"
            class="theme-card-bg relative right-0 !m-0 !rounded-xl duration-300"
          >
            <Icon name="material-symbols:keyboard-double-arrow-right-rounded" class="my-1" />
          </Button>
        </div>
      )
    }
  </div>
  {
    current < total && (
      <Button
        id="next-page-btn"
        class="theme-bg theme-border ml-auto !rounded-xl border-2"
        href={getPageUrl(current + 1)}
      >
        <Icon name="material-symbols:keyboard-double-arrow-right-rounded" class="my-1" />
      </Button>
    )
  }
</div>

<style lang="scss">
  /* hide arrows from number input */
  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    appearance: none;
  }

  input[type='number'] {
    appearance: textfield;
  }

  input:focus {
    outline: none;
  }
</style>

<script>
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const pageJumper = document.getElementById('page-jumper');
    const pageJumperInput = document.getElementById(
      'page-jumper-input'
    ) as HTMLInputElement | null;
    const pageJumperButton = document.getElementById('page-jumper-button');

    function pageJumperMouseEnterCallback() {
      if (pageJumperInput) pageJumperInput.style.width = '4rem';
      pageJumperInput?.classList.remove('inert');
      pageJumperInput?.classList.add('pl-4');
      pageJumperInput?.focus();
    }

    function pageJumperMouseLeaveCallback() {
      if (pageJumperInput) pageJumperInput.style.width = '0px';
      pageJumperInput?.classList.add('inert');
      pageJumperInput?.classList.remove('pl-4');
      pageJumperInput?.blur();
    }

    function getPageUrl(page: number) {
      const baseUrl = pageJumper?.getAttribute('data-base-url');
      const specialPagesStr = pageJumper?.getAttribute('data-special-pages');
      const specialPagesArray = specialPagesStr?.split(',');
      const specialPages = specialPagesArray?.map((p) => {
        const [page, url] = p.split(':', 2);
        return { page: Number(page), url: url };
      });
      return specialPages?.find((p) => p.page === page)?.url || `${baseUrl}/${page}`;
    }

    function pageJumperExecHandler() {
      const page = pageJumperInput?.value;
      if (page) {
        const pageUrl = getPageUrl(Number(page));
        navigate(pageUrl);
      }
    }

    pageJumper?.addEventListener('mouseenter', pageJumperMouseEnterCallback);
    pageJumper?.addEventListener('mouseleave', pageJumperMouseLeaveCallback);
    pageJumperMouseLeaveCallback();

    pageJumperInput?.addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        pageJumperExecHandler();
      }
    });
    pageJumperButton?.addEventListener('click', pageJumperExecHandler);
  });
</script>
