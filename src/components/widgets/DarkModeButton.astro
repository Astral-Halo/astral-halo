---
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';
import Button from './Button.astro';

interface Props extends Omit<HTMLAttributes<'button'>, 'onclick'> {
  showText?: boolean;
}

const { class: className, showText, ...rest } = Astro.props;
---

<Button
  class:list={['darkmode-btn swap', className]}
  {...rest}
  data-text-light={i18n(I18nKey.lightMode)}
  data-text-dark={i18n(I18nKey.darkMode)}
  data-text-auto={i18n(I18nKey.systemMode)}
>
  <input type="checkbox" />
  <Icon class="darkmode-icon-light swap-off" name="material-symbols:light-mode-rounded" />
  <Icon class="darkmode-icon-dark swap-on" name="material-symbols:dark-mode-rounded" />
  <Icon
    class="darkmode-icon-auto swap-indeterminate"
    name="material-symbols:night-sight-auto-rounded"
  />
  {showText && <span class="darkmode-text pl-6" />}
</Button>

<script>
  function setup() {
    const darkmodeBtns = document.querySelectorAll('button.darkmode-btn');

    darkmodeBtns.forEach((btn) => {
      const checkbox = btn.querySelector('input[type="checkbox"]') as HTMLInputElement;
      const text = btn.querySelector('.darkmode-text');

      // 初始化状态
      if ('darkMode' in localStorage) {
        checkbox.checked = localStorage.darkMode === 'true';
        checkbox.indeterminate = false;
      } else {
        checkbox.indeterminate = true;
      }

      // 更新文本和标题
      function updateText() {
        if (!text) return;

        const textContent = checkbox.indeterminate
          ? btn.getAttribute('data-text-auto')
          : checkbox.checked
            ? btn.getAttribute('data-text-dark')
            : btn.getAttribute('data-text-light');

        text.textContent = textContent;
        btn.setAttribute('title', textContent || '');
      }

      // 更新主题
      function updateTheme() {
        if (checkbox.indeterminate) {
          localStorage.removeItem('darkMode');
          const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
        } else {
          localStorage.darkMode = checkbox.checked;
          document.documentElement.setAttribute(
            'data-theme',
            checkbox.checked ? 'dark' : 'light'
          );
        }
      }

      btn.addEventListener('click', () => {
        if (checkbox.indeterminate) {
          checkbox.indeterminate = false;
          checkbox.checked = false;
        } else if (!checkbox.checked) {
          checkbox.checked = true;
        } else {
          checkbox.checked = false;
          checkbox.indeterminate = true;
        }

        updateText();
        updateTheme();
      });

      updateText();
      updateTheme();
    });
  }

  document.addEventListener('astro:page-load', setup);
  setup();
</script>
