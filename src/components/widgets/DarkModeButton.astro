---
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';
import Button from './Button.astro';

interface Props extends Omit<HTMLAttributes<'button'>, 'onclick'> {
  showText?: boolean;
}

const { class: className, showText, ...rest } = Astro.props;
---

<Button
  class:list={['darkmode-btn', className]}
  {...rest}
  data-text-light={i18n(I18nKey.lightMode)}
  data-text-dark={i18n(I18nKey.darkMode)}
  data-text-auto={i18n(I18nKey.systemMode)}
>
  <Icon class="darkmode-icon-light" name="material-symbols:light-mode-rounded" />
  <Icon class="darkmode-icon-dark" name="material-symbols:dark-mode-rounded" />
  <Icon class="darkmode-icon-auto" name="material-symbols:night-sight-auto-rounded" />
  {showText && <span class="darkmode-text ml-auto mr-2 px-2" />}
</Button>

<script>
  const darkmodeBtns = document.querySelectorAll('button.darkmode-btn');

  function refreshButtons() {
    darkmodeBtns.forEach((btn) => {
      const iconLight = btn.querySelector('.darkmode-icon-light');
      const iconDark = btn.querySelector('.darkmode-icon-dark');
      const iconAuto = btn.querySelector('.darkmode-icon-auto');
      const text = btn.querySelector('.darkmode-text');

      if ('darkMode' in localStorage && localStorage.darkMode === 'true') {
        iconLight?.classList.add('hidden');
        iconDark?.classList.remove('hidden');
        iconAuto?.classList.add('hidden');
        if (text) text.textContent = btn.getAttribute('data-text-dark');
        btn.setAttribute('title', btn.getAttribute('data-text-dark') || '');
      } else if ('darkMode' in localStorage && localStorage.darkMode === 'false') {
        iconLight?.classList.remove('hidden');
        iconDark?.classList.add('hidden');
        iconAuto?.classList.add('hidden');
        if (text) text.textContent = btn.getAttribute('data-text-light');
        btn.setAttribute('title', btn.getAttribute('data-text-light') || '');
      } else {
        iconLight?.classList.add('hidden');
        iconDark?.classList.add('hidden');
        iconAuto?.classList.remove('hidden');
        if (text) text.textContent = btn.getAttribute('data-text-auto');
        btn.setAttribute('title', btn.getAttribute('data-text-auto') || '');
      }
    });
  }

  darkmodeBtns.forEach((btn) => {
    btn.addEventListener('click', () => {
      if (!('darkMode' in localStorage)) {
        localStorage.darkMode = false;
        document.documentElement.classList.remove('dark');
      } else if (localStorage.darkMode === 'false') {
        localStorage.darkMode = true;
        document.documentElement.classList.add('dark');
      } else {
        localStorage.removeItem('darkMode');
        if (window.matchMedia('(prefers-color-scheme: dark)').matches)
          document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      }
      refreshButtons();
    });
  });
  refreshButtons();
</script>
