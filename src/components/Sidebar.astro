---
import { navbarConfig } from '@/config';
import { i18n } from '@i18n/translation';
import { Icon } from 'astro-icon/components';
import Button from './widgets/Button.astro';
import DarkModeButton from './widgets/DarkModeButton.astro';
---

<div id="sidebar">
  <div
    id="sidebar-mask"
    class="pointer-events-none fixed z-40 h-full w-full bg-black/10 opacity-0 backdrop-blur-md backdrop-saturate-100 duration-500 ease-in-out"
  >
  </div>
  <div
    id="sidebar-menu"
    class="theme-border theme-card-bg fixed -right-1/2 z-50 h-full w-1/2 border-l-2 duration-500 ease-in-out"
  >
    <div id="sidebar-site-data"></div>
    <DarkModeButton
      showText={true}
      class="theme-border !w-[calc(100%-1rem)] border-2 text-lg"
    />
    <div id="sidebar-menu-text-items">
      {
        navbarConfig.navbarCenterItems.map((item) => (
          <Button
            id="sidebar-menu-item"
            {...('href' in item && item.href && { href: item.href })}
            title={i18n(item.text)}
          >
            <span class="text-xl">{i18n(item.text)}</span>
          </Button>
        ))
      }
    </div>
    <div id="sidebar-menu-icon-items" class="flex">
      {
        navbarConfig.navbarRightItems.onlyWide.map((item) => (
          <Button
            id="sidebar-menu-item"
            {...('href' in item && item.href && { href: item.href })}
            title={i18n(item.text)}
            {...('onclick' in item &&
              item.onclick &&
              (typeof item.onclick === 'string'
                ? { onclick: item.onclick }
                : { id: 'side-' + item.onclick.id }))}
          >
            <Icon name={item.icon} class="text-2xl" />
          </Button>
        ))
      }
    </div>
  </div>
</div>

<script>
  import { navbarConfig } from '@/config';
  const rightItems = navbarConfig.navbarRightItems.onlyWide;

  function initSidebar() {
    const toggleSidebarBtns = document.getElementById('nav-toggle-sidebar-btn');
    const sidebarMask = document.getElementById('sidebar-mask');
    const sidebarMenu = document.getElementById('sidebar-menu');

    toggleSidebarBtns?.addEventListener('click', () => {
      sidebarMask?.classList.remove('opacity-0');
      sidebarMask?.classList.remove('pointer-events-none');
      sidebarMenu?.classList.add('-translate-x-full');
      sidebarMenu?.removeAttribute('inert');
    });

    sidebarMask?.addEventListener('click', () => {
      sidebarMask?.classList.add('opacity-0');
      sidebarMask?.classList.add('pointer-events-none');
      sidebarMenu?.classList.remove('-translate-x-full');
      sidebarMenu?.setAttribute('inert', 'true');
    });

    window.addEventListener('resize', () => {
      if (window.innerWidth > 768) {
        sidebarMask?.classList.add('opacity-0');
        sidebarMask?.classList.add('pointer-events-none');
        sidebarMenu?.classList.remove('-translate-x-full');
        sidebarMenu?.setAttribute('inert', 'true');
      }
    });

    // 绑定设置的点击事件
    rightItems.forEach((item) => {
      if ('onclick' in item && item.onclick && typeof item.onclick !== 'string') {
        const element = document.getElementById('side-' + item.onclick.id);
        if (element) element.addEventListener('click', item.onclick.function);
      }
    });
  }

  document.addEventListener('astro:page-load', initSidebar);
</script>
