---
import { articleConfig } from '@/config';
import MetaIcon from '@components/widgets/MetaIcon.astro';
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import { getCategoryUrl, getTagUrl } from '@utils/content-utils';

interface Props {
  title: string;
  publishedAt: Date;
  category: string;
  tags: string[];
  wordsCount: number;
  readingTime: number;
  class?: string;
}

const {
  title,
  publishedAt,
  category,
  tags,
  wordsCount: wordCount,
  readingTime,
  class: className,
} = Astro.props;

const metas: ({ icon: string; text: string; link?: string; time?: Date } | undefined)[] = [
  {
    icon: 'material-symbols:calendar-clock-outline-rounded',
    text: publishedAt.toLocaleDateString(),
    time: publishedAt,
  },
  articleConfig.wordCount
    ? {
        icon: 'material-symbols:docs-rounded',
        text: `${wordCount} ${wordCount === 1 ? i18n(I18nKey.wordCount) : i18n(I18nKey.wordsCount)}`,
      }
    : undefined,
  articleConfig.readingTime
    ? {
        icon: 'material-symbols:nest-clock-farsight-analog-rounded',
        text: `${readingTime} ${readingTime === 1 ? i18n(I18nKey.minuteCount) : i18n(I18nKey.minutesCount)}`,
      }
    : undefined,
  category
    ? {
        icon: 'material-symbols:category-outline-rounded',
        text: category,
        link: getCategoryUrl(category),
      }
    : undefined,
  ...tags.map((tag) => {
    return {
      icon: 'material-symbols:tag-rounded',
      text: tag,
      link: getTagUrl(tag),
    };
  }),
];
---

<div id="post-info" class:list={['flex flex-col', className]}>
  <h1 class="text-3xl font-bold">{title}</h1>
  <div id="post-meta" class="mt-4 flex flex-wrap gap-3">
    {
      metas.map((meta) => {
        return (
          meta && (
            <div class="text-base-content/60 flex items-center text-sm">
              <MetaIcon name={meta.icon} />
              {(() => {
                const text = meta.time ? (
                  <time datetime={meta.time?.toISOString()}>{meta.text}</time>
                ) : (
                  <span>{meta.text}</span>
                );
                return meta.link ? (
                  <a href={meta.link} title={meta.text}>
                    {text}
                  </a>
                ) : (
                  text
                );
              })()}
            </div>
          )
        );
      })
    }
  </div>
</div>
